{"version":3,"sources":["../src/transformers.js"],"names":["transformDataToTable","data","panel","model","TableModel","length","transformer","transformers","transform","message","_","flatten","TimeSeries","mergeTablesIntoModel","description","getColumns","columns","text","type","i","series","y","datapoints","dp","rows","push","target","points","timeKey","toString","time","point","values","value","alias","getFlotPairs","cells","stats","annotations","evt","title","tags","columnNames","reduce","acc","forEach","col","undefined","noTableIndex","findIndex","d","String","fromCharCode","names","maxDocs","Math","min","doc","flattened","propName","map","key","z","column","tableCol","filterable","isObject","JSON","stringify"],"mappings":"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","file":"transformers.js","sourcesContent":["import _ from 'lodash';\nimport flatten from 'app/core/utils/flatten';\nimport TimeSeries from 'app/core/time_series2';\nimport TableModel, { mergeTablesIntoModel } from 'app/core/table_model';\n\nconst transformers = {};\n\ntransformers['timeseries_to_rows'] = {\n\tdescription: 'Time series to rows',\n\tgetColumns: () => {\n\t\treturn [];\n\t},\n\ttransform: (data, panel, model) => {\n\t\tmodel.columns = [ { text: 'Time', type: 'date' }, { text: 'Metric' }, { text: 'Value' } ];\n\n\t\tfor (let i = 0; i < data.length; i++) {\n\t\t\tconst series = data[i];\n\t\t\tfor (let y = 0; y < series.datapoints.length; y++) {\n\t\t\t\tconst dp = series.datapoints[y];\n\t\t\t\tmodel.rows.push([ dp[1], series.target, dp[0] ]);\n\t\t\t}\n\t\t}\n\t}\n};\n\ntransformers['timeseries_to_columns'] = {\n\tdescription: 'Time series to columns',\n\tgetColumns: () => {\n\t\treturn [];\n\t},\n\ttransform: (data, panel, model) => {\n\t\tmodel.columns.push({ text: 'Time', type: 'date' });\n\n\t\t// group by time\n\t\tconst points = {};\n\n\t\tfor (let i = 0; i < data.length; i++) {\n\t\t\tconst series = data[i];\n\t\t\tmodel.columns.push({ text: series.target });\n\n\t\t\tfor (let y = 0; y < series.datapoints.length; y++) {\n\t\t\t\tconst dp = series.datapoints[y];\n\t\t\t\tconst timeKey = dp[1].toString();\n\n\t\t\t\tif (!points[timeKey]) {\n\t\t\t\t\tpoints[timeKey] = { time: dp[1] };\n\t\t\t\t\tpoints[timeKey][i] = dp[0];\n\t\t\t\t} else {\n\t\t\t\t\tpoints[timeKey][i] = dp[0];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (const time in points) {\n\t\t\tconst point = points[time];\n\t\t\tconst values = [ point.time ];\n\n\t\t\tfor (let i = 0; i < data.length; i++) {\n\t\t\t\tconst value = point[i];\n\t\t\t\tvalues.push(value);\n\t\t\t}\n\n\t\t\tmodel.rows.push(values);\n\t\t}\n\t}\n};\n\ntransformers['timeseries_aggregations'] = {\n\tdescription: 'Time series aggregations',\n\tgetColumns: () => {\n\t\treturn [\n\t\t\t{ text: 'Avg', value: 'avg' },\n\t\t\t{ text: 'Min', value: 'min' },\n\t\t\t{ text: 'Max', value: 'max' },\n\t\t\t{ text: 'Total', value: 'total' },\n\t\t\t{ text: 'Current', value: 'current' },\n\t\t\t{ text: 'Count', value: 'count' }\n\t\t];\n\t},\n\ttransform: (data, panel, model) => {\n\t\tlet i, y;\n\t\tmodel.columns.push({ text: 'Metric' });\n\n\t\tfor (i = 0; i < panel.columns.length; i++) {\n\t\t\tmodel.columns.push({ text: panel.columns[i].text });\n\t\t}\n\n\t\tfor (i = 0; i < data.length; i++) {\n\t\t\tconst series = new TimeSeries({\n\t\t\t\tdatapoints: data[i].datapoints,\n\t\t\t\talias: data[i].target\n\t\t\t});\n\n\t\t\tseries.getFlotPairs('connected');\n\t\t\tconst cells = [ series.alias ];\n\n\t\t\tfor (y = 0; y < panel.columns.length; y++) {\n\t\t\t\tcells.push(series.stats[panel.columns[y].value]);\n\t\t\t}\n\n\t\t\tmodel.rows.push(cells);\n\t\t}\n\t}\n};\n\ntransformers['annotations'] = {\n\tdescription: 'Annotations',\n\tgetColumns: () => {\n\t\treturn [];\n\t},\n\ttransform: (data, panel, model) => {\n\t\tmodel.columns.push({ text: 'Time', type: 'date' });\n\t\tmodel.columns.push({ text: 'Title' });\n\t\tmodel.columns.push({ text: 'Text' });\n\t\tmodel.columns.push({ text: 'Tags' });\n\n\t\tif (!data || !data.annotations || data.annotations.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (let i = 0; i < data.annotations.length; i++) {\n\t\t\tconst evt = data.annotations[i];\n\t\t\tmodel.rows.push([ evt.time, evt.title, evt.text, evt.tags ]);\n\t\t}\n\t}\n};\n\ntransformers['table'] = {\n\tdescription: 'Table',\n\tgetColumns: (data) => {\n\t\tif (!data || data.length === 0) {\n\t\t\treturn [];\n\t\t}\n\t\t// Single query returns data columns as is\n\t\tif (data.length === 1) {\n\t\t\treturn [ ...data[0].columns ];\n\t\t}\n\n\t\t// Track column indexes: name -> index\n\t\tconst columnNames = {};\n\n\t\t// Union of all columns\n\t\tconst columns = data.reduce((acc, series) => {\n\t\t\tseries.columns.forEach((col) => {\n\t\t\t\tconst { text } = col;\n\t\t\t\tif (columnNames[text] === undefined) {\n\t\t\t\t\tcolumnNames[text] = acc.length;\n\t\t\t\t\tacc.push(col);\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn acc;\n\t\t}, []);\n\n\t\treturn columns;\n\t},\n\ttransform: (data, panel, model) => {\n\t\tif (!data || data.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst noTableIndex = _.findIndex(data, (d) => d.type !== 'table');\n\t\tif (noTableIndex > -1) {\n\t\t\tthrow {\n\t\t\t\tmessage: `Result of query #${String.fromCharCode(\n\t\t\t\t\t65 + noTableIndex\n\t\t\t\t)} is not in table format, try using another transform.`\n\t\t\t};\n\t\t}\n\n\t\t// mergeTablesIntoModel(model, ...data);\n\n\t\tmodel.columns = data[0].columns;\n\t\tmodel.rows = data[0].rows;\n\t}\n};\n\ntransformers['json'] = {\n\tdescription: 'JSON Data',\n\tgetColumns: (data) => {\n\t\tif (!data || data.length === 0) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst names = {};\n\t\tfor (let i = 0; i < data.length; i++) {\n\t\t\tconst series = data[i];\n\t\t\tif (series.type !== 'docs') {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// only look at 100 docs\n\t\t\tconst maxDocs = Math.min(series.datapoints.length, 100);\n\t\t\tfor (let y = 0; y < maxDocs; y++) {\n\t\t\t\tconst doc = series.datapoints[y];\n\t\t\t\tconst flattened = flatten(doc, null);\n\t\t\t\tfor (const propName in flattened) {\n\t\t\t\t\tnames[propName] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn _.map(names, (value, key) => {\n\t\t\treturn { text: key, value: key };\n\t\t});\n\t},\n\ttransform: (data, panel, model) => {\n\t\tlet i, y, z;\n\n\t\tfor (const column of panel.columns) {\n\t\t\tconst tableCol = { text: column.text };\n\n\t\t\t// if filterable data then set columns to filterable\n\t\t\tif (data.length > 0 && data[0].filterable) {\n\t\t\t\ttableCol.filterable = true;\n\t\t\t}\n\n\t\t\tmodel.columns.push(tableCol);\n\t\t}\n\n\t\tif (model.columns.length === 0) {\n\t\t\tmodel.columns.push({ text: 'JSON' });\n\t\t}\n\n\t\tfor (i = 0; i < data.length; i++) {\n\t\t\tconst series = data[i];\n\n\t\t\tfor (y = 0; y < series.datapoints.length; y++) {\n\t\t\t\tconst dp = series.datapoints[y];\n\t\t\t\tconst values = [];\n\n\t\t\t\tif (_.isObject(dp) && panel.columns.length > 0) {\n\t\t\t\t\tconst flattened = flatten(dp, null);\n\t\t\t\t\tfor (z = 0; z < panel.columns.length; z++) {\n\t\t\t\t\t\tvalues.push(flattened[panel.columns[z].value]);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tvalues.push(JSON.stringify(dp));\n\t\t\t\t}\n\n\t\t\t\tmodel.rows.push(values);\n\t\t\t}\n\t\t}\n\t}\n};\n\nfunction transformDataToTable(data, panel) {\n\tconst model = new TableModel();\n\n\tif (!data || data.length === 0) {\n\t\treturn model;\n\t}\n\n\tconst transformer = transformers[panel.transform];\n\tif (!transformer) {\n\t\tthrow { message: 'Transformer ' + panel.transform + ' not found' };\n\t}\n\n\ttransformer.transform(data, panel, model);\n\treturn model;\n}\n\nexport { transformers, transformDataToTable };\n"]}