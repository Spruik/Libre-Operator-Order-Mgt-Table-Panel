{"version":3,"sources":["../src/confirm_modal_ctrl.js"],"names":["utils","cons","ConfirmCtrl","data","init","prepare","conflict","current","influxLine","conflictLine","line","url","tableCtrl","toState","conflictToState","sendCamunda","sendCamundaQACheck","confirmMsg","order_id","showModal","result","sure","post","result1","ok","alert","closeForm","refresh","STATE_START","error","setTimeout","document","querySelector","click"],"mappings":";;;;;;;;;;;;;;;AAAYA,W;;AACAC,U;;;;;;;;;;;;;;;;;;;;;6BAECC,W;AACX;AACA,6BAAYC,IAAZ,EAAkB;AAAA;;AAChB,eAAKC,IAAL,CAAUD,IAAV;AACA,eAAKE,OAAL;AACD;;;;+BAEIF,I,EAAM;AACT,iBAAKG,QAAL,GAAgBH,KAAKG,QAArB;AACA,iBAAKC,OAAL,GAAeJ,KAAKA,IAApB;AACA,iBAAKG,QAAL,CAAcE,UAAd,GAA2BL,KAAKM,YAAhC;AACA,iBAAKF,OAAL,CAAaC,UAAb,GAA0BL,KAAKO,IAA/B;AACA,iBAAKC,GAAL,GAAWR,KAAKQ,GAAhB;AACA,iBAAKC,SAAL,GAAiBT,KAAKS,SAAtB;AACA,iBAAKL,OAAL,CAAaM,OAAb,GAAuBV,KAAKU,OAA5B;AACA,iBAAKP,QAAL,CAAcO,OAAd,GAAwBV,KAAKW,eAA7B;AACA,iBAAKC,WAAL,GAAmBZ,KAAKa,kBAAxB;AACD;;;oCAES;AACR,iBAAKC,UAAL,sBAAmC,KAAKV,OAAL,CAAaW,QAAhD,cAAiE,KAAKX,OAAL,CAAaM,OAA9E,sBAAsG,KAAKP,QAAL,CAAcY,QAApH,0BAAiJ,KAAKZ,QAAL,CAAcO,OAA/J;AACD;;;iCAEM;AACLb,kBAAMmB,SAAN,CAAgB,mBAAhB,EAAqC,IAArC;AACD;;;4CAEiB;AAChB,gBAAMC,SAAS,MAAMpB,MAAMqB,IAAN,CAAWrB,MAAMsB,IAAN,CAAW,KAAKX,GAAhB,EAAqB,KAAKJ,OAAL,CAAaC,UAAlC,CAAX,CAArB;AACA,gBAAMe,UAAU,MAAMvB,MAAMqB,IAAN,CAAWrB,MAAMsB,IAAN,CAAW,KAAKX,GAAhB,EAAqB,KAAKL,QAAL,CAAcE,UAAnC,CAAX,CAAtB;AACA,gBAAIY,OAAOI,EAAP,IAAaD,QAAQC,EAAzB,EAA6B;AAC3BxB,oBAAMyB,KAAN,CAAY,SAAZ,EAAuB,SAAvB,aAA2C,KAAKlB,OAAL,CAAaW,QAAxD,4BAAuF,KAAKX,OAAL,CAAaM,OAApG;AACA,mBAAKa,SAAL;AACA,mBAAKd,SAAL,CAAee,OAAf;AACA,kBAAG,KAAKpB,OAAL,CAAaM,OAAb,KAAyBZ,KAAK2B,WAAjC,EAA6C;AAC3C,qBAAKb,WAAL,CAAiB,KAAKR,OAAtB;AACD;AACF,aAPD,MAOM;AACJkB,oBAAM,OAAN,EAAe,OAAf,6DAAgFL,OAAOS,KAAP,IAAgBN,QAAQM,KAAxG;AACA,mBAAKH,SAAL;AACA,mBAAKd,SAAL,CAAee,OAAf;AACD;AACF;;;sCAEW;AACVG,uBAAW,YAAM;AACfC,uBAASC,aAAT,CAAuB,iCAAvB,EAA0DC,KAA1D;AACD,aAFD,EAEG,CAFH;AAGD","file":"confirm_modal_ctrl.js","sourcesContent":["import * as utils from './utils'\nimport * as cons from './constants'\n\nexport class ConfirmCtrl {\n  /** @ngInject */\n  constructor(data) {\n    this.init(data)\n    this.prepare()\n  } \n\n  init(data) {\n    this.conflict = data.conflict\n    this.current = data.data\n    this.conflict.influxLine = data.conflictLine\n    this.current.influxLine = data.line\n    this.url = data.url\n    this.tableCtrl = data.tableCtrl\n    this.current.toState = data.toState\n    this.conflict.toState = data.conflictToState\n    this.sendCamunda = data.sendCamundaQACheck\n  }\n\n  prepare() {\n    this.confirmMsg = `To set order <${this.current.order_id}> to <${this.current.toState}>, the order <${this.conflict.order_id}> will be set to <${this.conflict.toState}>. Are you sure you want to make the change?`\n  }\n\n  show() {\n    utils.showModal('confirm_form.html', this)\n  }\n\n  async onConfirm() {\n    const result = await utils.sure(utils.post(this.url, this.current.influxLine))\n    const result1 = await utils.sure(utils.post(this.url, this.conflict.influxLine))\n    if (result.ok && result1.ok) {\n      utils.alert('success', 'Success', `Order ${this.current.order_id} has been marked as ${this.current.toState}`)\n      this.closeForm()\n      this.tableCtrl.refresh()\n      if(this.current.toState === cons.STATE_START){\n        this.sendCamunda(this.current)\n      }\n    }else {\n      alert('error', 'Error', `An error occurred while updating the database due to ${result.error || result1.error}, please try again or contact the dev team`)\n      this.closeForm()\n      this.tableCtrl.refresh()\n    }\n  }\n\n  closeForm() {\n    setTimeout(() => {\n      document.querySelector('#op-mgt-confirm-modal-cancelBtn').click()\n    }, 0);\n  }\n  \n}"]}