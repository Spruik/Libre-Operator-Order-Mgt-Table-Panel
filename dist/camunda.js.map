{"version":3,"sources":["../src/camunda.js"],"names":["utils","restructure","p","ingredient","applicators","forEach","app","$$hashKey","materials","mat","gramsTotal","materialId","oz","seriseId","formulaWt","gramsOnScale","actualAvg","actualDiff","actualWt","check","productId","id","productDescription","product_desc","meta","isManual","checkCount","isLastCheck","rangeMetrix","post","url","param","json","Promise","resolve","reject","xhr","XMLHttpRequest","open","onreadystatechange","handleResponse","setRequestHeader","onerror","e","send","readyState","status","responseText","startQACheck","product","line","orderId","FORM_KEY","PATH","searchPath","query","variables","name","operator","value","camundaRestApi","JSON","stringify","then","res","searchResponse","parse","length","alert","toSend","_currentLine","type","_checkForLineLead","_checkForQA","_allChecksForQA","_allChecksForLineLead","_orderId","_productId","_productDesc","_orderStartDateTime","Date","toISOString","businessKey","catch","closeProcessControlForm","callback","onfailed","messageName","correlationKeys"],"mappings":"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","file":"camunda.js","sourcesContent":["import * as utils from './utils';\n\n/**\n * This function restructures the product object into a check object for better manipulations in camunda qa check\n * @param {Object} p Product Object\n * @return {Object} restructured product object\n */\nconst restructure = (p) => {\n\tp.ingredient.applicators.forEach((app) => {\n\t\tdelete app.$$hashKey;\n\t\tapp.materials.forEach((mat) => {\n\t\t\tdelete mat.$$hashKey;\n\t\t\tdelete mat.gramsTotal;\n\t\t\tdelete mat.materialId;\n\t\t\tdelete mat.oz;\n\t\t\tdelete mat.seriseId;\n\t\t\tmat.formulaWt = mat.gramsOnScale;\n\t\t\tdelete mat.gramsOnScale;\n\t\t\tmat.actualAvg = null;\n\t\t\tmat.actualDiff = null;\n\t\t\tmat.actualWt = null;\n\t\t});\n\t});\n\n\tconst check = {\n\t\tproductId: p.id,\n\t\tproductDescription: p.product_desc,\n\t\tingredient: {\n\t\t\tapplicators: p.ingredient.applicators\n\t\t},\n\t\tmeta: {\n\t\t\tisManual: false,\n\t\t\tcheckCount: 1,\n\t\t\tisLastCheck: false,\n\t\t\trangeMetrix: {}\n\t\t}\n\t};\n\n\treturn check;\n};\n\nconst post = (url, param, json) => {\n\treturn new Promise((resolve, reject) => {\n\t\tvar xhr = new XMLHttpRequest();\n\t\txhr.open('POST', url + param);\n\t\txhr.onreadystatechange = handleResponse;\n\t\txhr.setRequestHeader('Content-Type', 'application/json');\n\t\txhr.onerror = (e) => reject(e);\n\t\txhr.send(json);\n\n\t\tfunction handleResponse() {\n\t\t\tif (xhr.readyState === 4) {\n\t\t\t\tif (xhr.status < 300 && xhr.status >= 200) {\n\t\t\t\t\tresolve(xhr.responseText);\n\t\t\t\t} else {\n\t\t\t\t\treject(xhr.responseText);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n};\n\nexport const startQACheck = (product, line, orderId) => {\n\tconst FORM_KEY = 'ProcessControlForm';\n\tconst PATH = `process-definition/key/${FORM_KEY}/start`;\n\n\t// search for process to see if the process has already been exist\n\tconst searchPath = 'process-instance';\n\tconst query = {\n\t\tvariables: [\n\t\t\t{\n\t\t\t\tname: '_orderId',\n\t\t\t\toperator: 'eq',\n\t\t\t\tvalue: orderId\n\t\t\t}\n\t\t]\n\t};\n\n\tpost(utils.camundaRestApi, searchPath, JSON.stringify(query))\n\t\t.then((res) => {\n\t\t\tconst searchResponse = JSON.parse(res);\n\t\t\tif (searchResponse.length > 0) {\n\t\t\t\t// exist\n\t\t\t\tutils.alert(\n\t\t\t\t\t'success',\n\t\t\t\t\t'Form already exist',\n\t\t\t\t\t`The Process Control Form for order <${orderId}> is already exist`\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\t// all good for creating a new form\n\t\t\t\tconst p = restructure(product);\n\t\t\t\tconst toSend = {\n\t\t\t\t\tvariables: {\n\t\t\t\t\t\t_currentLine: { value: line, type: 'String' },\n\t\t\t\t\t\t_checkForLineLead: { value: JSON.stringify(p), type: 'json' },\n\t\t\t\t\t\t_checkForQA: { value: JSON.stringify(p), type: 'json' },\n\t\t\t\t\t\t_allChecksForQA: { value: '[]', type: 'json' },\n\t\t\t\t\t\t_allChecksForLineLead: { value: '[]', type: 'json' },\n\t\t\t\t\t\t_orderId: { value: orderId, type: 'String' },\n\t\t\t\t\t\t_productId: { value: product.id, type: 'String' },\n\t\t\t\t\t\t_productDesc: { value: product.product_desc, type: 'String' },\n\t\t\t\t\t\t_orderStartDateTime: { value: new Date().toISOString(), type: 'String' }\n\t\t\t\t\t},\n\t\t\t\t\tbusinessKey: null\n\t\t\t\t};\n\t\t\t\tutils.alert('success', 'Starting...', 'Creating Process Control Form, notification email sending...');\n\n\t\t\t\tpost(utils.camundaRestApi, PATH, JSON.stringify(toSend))\n\t\t\t\t\t.then((res) => {\n\t\t\t\t\t\tutils.alert(\n\t\t\t\t\t\t\t'success',\n\t\t\t\t\t\t\t'Successful',\n\t\t\t\t\t\t\t`Process Control Form for order <${orderId}> has been created`\n\t\t\t\t\t\t);\n\t\t\t\t\t})\n\t\t\t\t\t.catch((e) => {\n\t\t\t\t\t\tutils.alert(\n\t\t\t\t\t\t\t'error',\n\t\t\t\t\t\t\t'Connection Error',\n\t\t\t\t\t\t\t`Camunda QA Check Process failed to start due to ${e} but you can still start it manually`\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t}\n\t\t})\n\t\t.catch((e) => {\n\t\t\tutils.alert(\n\t\t\t\t'error',\n\t\t\t\t'Connection Error',\n\t\t\t\t`Camunda QA Check Process failed to start due to ${e} but you can still start it manually`\n\t\t\t);\n\t\t});\n};\n\nexport const closeProcessControlForm = (orderId, callback, onfailed) => {\n\tconst toSend = {\n\t\tmessageName: 'processControlOrderEnded',\n\t\tcorrelationKeys: {\n\t\t\t_orderId: {\n\t\t\t\tvalue: orderId,\n\t\t\t\ttype: 'String'\n\t\t\t}\n\t\t}\n\t};\n\n\tpost(utils.camundaRestApi, 'message', JSON.stringify(toSend))\n\t\t.then((res) => {\n\t\t\tutils.alert('success', 'Successful', 'The Process Control Form for this order has been closed');\n\t\t\tcallback();\n\t\t})\n\t\t.catch((e) => {\n\t\t\tutils.alert(\n\t\t\t\t'error',\n\t\t\t\t'Connection Error',\n\t\t\t\t`Camunda Process Control Form failed to complete due to ${e}, please try again`\n\t\t\t);\n\t\t\tonfailed();\n\t\t});\n};\n"]}