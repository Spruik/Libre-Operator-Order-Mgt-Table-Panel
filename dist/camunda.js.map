{"version":3,"sources":["../src/camunda.js"],"names":["utils","restructure","p","ingredient","applicators","forEach","app","$$hashKey","materials","mat","gramsTotal","materialId","oz","seriseId","formulaWt","gramsOnScale","actualAvg","actualDiff","actualWt","check","productId","product_id","productDescription","product_desc","crust","name","tolerance","sauce","meta","isManual","checkCount","isLastCheck","rangeMetrix","conditionOfBelts","beltDescription","post","url","param","json","Promise","resolve","reject","xhr","XMLHttpRequest","open","onreadystatechange","handleResponse","setRequestHeader","onerror","e","send","readyState","status","responseText","startQACheck","product","line","FORM_KEY","PATH","toSend","variables","_currentLine","value","type","_currentCheck","_lastCheck","_product","JSON","stringify","_allChecks","businessKey","camundaRestApi","then","alert","catch"],"mappings":"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","file":"camunda.js","sourcesContent":["import * as utils from './utils'\n\n/**\n * This function restructures the product object into a check object for better manipulations in camunda qa check\n * @param {Object} p Product Object\n * @return {Object} restructured product object\n */\nconst restructure = p => {\n\n  p.ingredient.applicators.forEach( app => {\n    delete app.$$hashKey\n    app.materials.forEach( mat => {\n      delete mat.$$hashKey\n      delete mat.gramsTotal\n      delete mat.materialId\n      delete mat.oz\n      delete mat.seriseId\n      mat.formulaWt = mat.gramsOnScale\n      delete mat.gramsOnScale\n      mat.actualAvg = null\n      mat.actualDiff = null\n      mat.actualWt = null\n    })\n  })\n\n  const check = {\n    productId: p.product_id,\n    productDescription: p.product_desc,\n    ingredient: {\n      crust: {\n        name: p.ingredient.crust.name,\n        formulaWt: p.ingredient.crust.gramsOnScale,\n        actualWt: null,\n        actualAvg: null,\n        actualDiff: null,\n        tolerance: p.ingredient.crust.tolerance,\n      },\n      sauce: {\n        name: p.ingredient.sauce.name,\n        formulaWt: p.ingredient.sauce.gramsOnScale,\n        actualWt: null,\n        actualAvg: null,\n        actualDiff: null,\n        tolerance: p.ingredient.sauce.tolerance,\n      },\n      applicators: p.ingredient.applicators\n    },\n    meta: {\n      isManual: false,\n      checkCount: 1,\n      isLastCheck: false,\n      rangeMetrix: {}\n    },\n    conditionOfBelts: 'Good',\n    beltDescription: null\n  }\n\n  return check\n}\n\nconst post = (url, param, json) => {\n  return new Promise((resolve, reject) => {\n    var xhr = new XMLHttpRequest()\n    xhr.open('POST', url + param)\n    xhr.onreadystatechange = handleResponse\n    xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n    xhr.onerror = e => reject(e)\n    xhr.send(json)\n\n    function handleResponse () {\n      if (xhr.readyState === 4) {\n        if (xhr.status < 300 && xhr.status >= 200) {\n          resolve(xhr.responseText)\n        } else {\n          reject(xhr.responseText)\n        }\n      }\n    }\n  })\n}\n\nexport const startQACheck = (product, line) => {\n  const FORM_KEY = 'QAFormProductOnly'\n  const PATH = `process-definition/key/${FORM_KEY}/start`\n  \n  const p = restructure(product)\n\n  const toSend = {\n    variables : {\n      _currentLine : { value : line, type : \"String\" },\n      _currentCheck: { value : 1, type : \"Long\" },\n      _lastCheck: { value : false, type : \"Boolean\" },\n      _product: { value : JSON.stringify(p), type : \"json\" },\n      _allChecks: { value : \"[]\", type : \"json\" }\n    }, \n    businessKey : null\n  }\n\n  post(utils.camundaRestApi, PATH, JSON.stringify(toSend)).then(res => {\n    utils.alert('success', 'Successful', 'A Camunda QA Check Process has been started')\n  }).catch(e => {\n    utils.alert('error', 'Connection Error', `Camunda QA Check Process failed to start due to ${e} but you can still start it manually`)\n  })\n}"]}