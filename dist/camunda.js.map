{"version":3,"sources":["../src/camunda.js"],"names":["utils","restructure","p","ingredient","applicators","forEach","app","$$hashKey","materials","mat","gramsTotal","materialId","oz","seriseId","formulaWt","gramsOnScale","actualAvg","actualDiff","actualWt","check","productId","id","productDescription","product_desc","meta","isManual","checkCount","isLastCheck","rangeMetrix","conditionOfBelts","beltDescription","post","url","param","json","Promise","resolve","reject","xhr","XMLHttpRequest","open","onreadystatechange","handleResponse","setRequestHeader","onerror","e","send","readyState","status","responseText","startQACheck","product","line","orderId","FORM_KEY","PATH","toSend","variables","_currentLine","value","type","_currentCheck","_lastCheck","_product","JSON","stringify","_allChecks","_orderId","businessKey","alert","camundaRestApi","then","res","catch"],"mappings":"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","file":"camunda.js","sourcesContent":["import * as utils from './utils';\n\n/**\n * This function restructures the product object into a check object for better manipulations in camunda qa check\n * @param {Object} p Product Object\n * @return {Object} restructured product object\n */\nconst restructure = (p) => {\n\tp.ingredient.applicators.forEach((app) => {\n\t\tdelete app.$$hashKey;\n\t\tapp.materials.forEach((mat) => {\n\t\t\tdelete mat.$$hashKey;\n\t\t\tdelete mat.gramsTotal;\n\t\t\tdelete mat.materialId;\n\t\t\tdelete mat.oz;\n\t\t\tdelete mat.seriseId;\n\t\t\tmat.formulaWt = mat.gramsOnScale;\n\t\t\tdelete mat.gramsOnScale;\n\t\t\tmat.actualAvg = null;\n\t\t\tmat.actualDiff = null;\n\t\t\tmat.actualWt = null;\n\t\t});\n\t});\n\n\tconst check = {\n\t\tproductId: p.id,\n\t\tproductDescription: p.product_desc,\n\t\tingredient: {\n\t\t\tapplicators: p.ingredient.applicators\n\t\t},\n\t\tmeta: {\n\t\t\tisManual: false,\n\t\t\tcheckCount: 1,\n\t\t\tisLastCheck: false,\n\t\t\trangeMetrix: {}\n\t\t},\n\t\tconditionOfBelts: '',\n\t\tbeltDescription: null\n\t};\n\n\treturn check;\n};\n\nconst post = (url, param, json) => {\n\treturn new Promise((resolve, reject) => {\n\t\tvar xhr = new XMLHttpRequest();\n\t\txhr.open('POST', url + param);\n\t\txhr.onreadystatechange = handleResponse;\n\t\txhr.setRequestHeader('Content-Type', 'application/json');\n\t\txhr.onerror = (e) => reject(e);\n\t\txhr.send(json);\n\n\t\tfunction handleResponse() {\n\t\t\tif (xhr.readyState === 4) {\n\t\t\t\tif (xhr.status < 300 && xhr.status >= 200) {\n\t\t\t\t\tresolve(xhr.responseText);\n\t\t\t\t} else {\n\t\t\t\t\treject(xhr.responseText);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n};\n\nexport const startQACheck = (product, line, orderId) => {\n\tconst FORM_KEY = 'QAFormProductOnly';\n\tconst PATH = `process-definition/key/${FORM_KEY}/start`;\n\n\tconst p = restructure(product);\n\n\tconst toSend = {\n\t\tvariables: {\n\t\t\t_currentLine: { value: line, type: 'String' },\n\t\t\t_currentCheck: { value: 1, type: 'Long' },\n\t\t\t_lastCheck: { value: false, type: 'Boolean' },\n\t\t\t_product: { value: JSON.stringify(p), type: 'json' },\n\t\t\t_allChecks: { value: '[]', type: 'json' },\n\t\t\t_orderId: { value: orderId, type: 'String' }\n\t\t},\n\t\tbusinessKey: null\n\t};\n\n\tutils.alert('success', 'Starting...', 'A Camunda QA Check Process is starting...');\n\n\tpost(utils.camundaRestApi, PATH, JSON.stringify(toSend))\n\t\t.then((res) => {\n\t\t\tutils.alert('success', 'Successful', 'A Camunda QA Check Process has been started');\n\t\t})\n\t\t.catch((e) => {\n\t\t\tutils.alert(\n\t\t\t\t'error',\n\t\t\t\t'Connection Error',\n\t\t\t\t`Camunda QA Check Process failed to start due to ${e} but you can still start it manually`\n\t\t\t);\n\t\t});\n};\n"]}