{"version":3,"sources":["../src/postgres.js"],"names":["utils","getProductById","id","success","url","postgRestHost","get","then","res","catch","e","alert","getOrderStates","sure"],"mappings":";;;;;;;;AAAYA,Q;;;6BAECC,c,GAAiB,SAAjBA,cAAiB,CAACC,EAAD,EAAKC,OAAL,EAAiB;AAC9C,QAAMC,MAASJ,MAAMK,aAAf,sBAA6CH,EAAnD;AACAF,UACEM,GADF,CACMF,GADN,EAEEG,IAFF,CAEO,UAACC,GAAD,EAAS;AACdL,aAAQK,GAAR;AACA,KAJF,EAKEC,KALF,CAKQ,UAACC,CAAD,EAAO;AACbV,WAAMW,KAAN,CACC,OADD,EAEC,kBAFD,uDAGoDD,CAHpD;AAKA,KAXF;AAYA,I;;;;6BAEYE,c,GAAiB,eAAjBA,cAAiB,GAAY;AACzC,QAAMR,MAASJ,MAAMK,aAAf,gBAAN;AACA,WAAO,MAAML,MAAMa,IAAN,CAAWb,MAAMM,GAAN,CAAUF,GAAV,CAAX,CAAb;AACA,I","file":"postgres.js","sourcesContent":["import * as utils from './utils';\n\nexport const getProductById = (id, success) => {\n\tconst url = `${utils.postgRestHost}product?id=eq.${id}`;\n\tutils\n\t\t.get(url)\n\t\t.then((res) => {\n\t\t\tsuccess(res);\n\t\t})\n\t\t.catch((e) => {\n\t\t\tutils.alert(\n\t\t\t\t'error',\n\t\t\t\t'Connection Error',\n\t\t\t\t`Camunda QA Check Process failed to start due to ${e} but you can still start it manually`\n\t\t\t);\n\t\t});\n};\n\nexport const getOrderStates = async () => {\n\tconst url = `${utils.postgRestHost}order_state`;\n\treturn await utils.sure(utils.get(url));\n};\n"]}