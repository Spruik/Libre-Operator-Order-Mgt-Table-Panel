{"version":3,"sources":["../src/actions_form_ctrl.js"],"names":["showActionForm","productionLine","orderId","description","productId","tags","getRowData","callback","rowData","order_state","toLowerCase","alert","appEvents","emit","src","modalClass","model","removeListeners","addListeners","url","getInfluxLine","get","then","result","formatData","res","runningRecord","catch","console","log","e","influxHost","records","series","results","cols","columns","map","x","substring","length","rows","resultTags","i","push","values","row","obj","k","col","Object","assign","currents","filter","record","order_id","product_id","product_desc","current","runnings","filteredRunnings","running","undefined","runningGroups","isRunningTheLatest","_","isEqual","$","document","on","target","id","updateRecord","updateNextToRunningAndRunningExist","planned_rate","postgres","getProductById","camunda","startQACheck","production_line","off","data","status","rate","line","writeInfluxLine","post","closeForm","tableCtrl","refresh","cur","run","currentLine","runningLine","split","join","compl_qty","machine_state","scrap_qty","actual_start_datetime","actual_end_datetime","moment","now","order_date","order_qty","scheduled_end_datetime","scheduled_start_datetime","planned_changeover_time","trigger"],"mappings":"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","file":"actions_form_ctrl.js","sourcesContent":["\nimport { appEvents } from 'app/core/core'\nimport { get, influxHost, post, alert } from './utils'\nimport * as tableCtrl from './table_ctrl'\nimport * as postgres from './postgres'\nimport * as camunda from './camunda'\nimport moment from 'moment'\n\nlet rowData\nlet runningRecord = {}\n\nconst closeForm = () => {\n  $('#order-mgt-operator-action-form-dismiss-btn').trigger('click')\n}\n\nfunction showActionForm(productionLine, orderId, description, productId) {\n  const tags = {\n    productionLine : productionLine, \n    orderId : orderId,\n    description : description,\n    productId : productId\n  }\n\n  getRowData(callback, tags)\n\n  function callback() {\n    if (rowData.order_state) {\n      if (rowData.order_state.toLowerCase() === 'planned') {\n        alert('warning', 'Warning', 'This order has NOT been released')\n        return\n      }\n      if (rowData.order_state.toLowerCase() === 'closed') {\n        alert('warning', 'Warning', 'This order has been closed')\n        return\n      }\n    }\n\n    appEvents.emit('show-modal', {\n      src: 'public/plugins/smart-factory-operator-order-mgt-table-panel/partials/actions_form.html',\n      modalClass: 'confirm-modal',\n      model: { orderId : tags.orderId }\n    })\n\n    removeListeners()\n    addListeners()\n  }\n\n}\n\n/**\n * Get the record data with the tag values passed in\n * Call the callback function once it is finished\n * Stop and prompt error when it fails\n * @param {*} callback \n * @param {*} tags \n */\nfunction getRowData(callback, tags){\n  const url = getInfluxLine(tags)\n  get(url).then(res => {\n    const result = formatData(res, tags)\n    rowData = result[0]\n    runningRecord = result[1]\n    callback()\n  }).catch(e => {\n    alert('error', 'Database Error', 'Database connection failed with influxdb')\n    console.log(e)\n  })\n}\n\n/**\n * Write line for the influxdb query\n * @param {*} tags \n */\nfunction getInfluxLine(tags){\n  let url = influxHost + 'query?pretty=true&db=smart_factory&q=select last(*) from OrderPerformance' + ' where '\n  url += 'production_line=' + '\\'' + tags.productionLine + '\\'' + ' group by ' + '\"product_desc\", \"product_id\", \"order_id\" fill(previous)'\n\n  // console.log(url)\n  \n  return url\n}\n\n/**\n * The params may contain more than one row record\n * This is to fomrat the http response into a better structure\n * And also filter out the latest record\n * @param {*} res \n */\nfunction formatData(res, tags){\n  let records = []\n\n  const series = res.results[0].series\n\n  let cols = series[0].columns\n  cols = cols.map(x => x.substring(5, x.length))\n  cols[0] = \"time\"\n  let rows = []\n  let resultTags = []\n  for (let i = 0; i < series.length; i++) {\n    rows.push(series[i].values[0])\n    resultTags.push(series[i].tags)\n  }\n\n  for (let i = 0; i < rows.length; i++) {\n    const row = rows[i];\n    let obj = {}\n    for (let k = 0; k < cols.length; k++) {\n      const col = cols[k];\n      obj[col] = row[k]\n    }\n    obj = Object.assign(obj, resultTags[i])\n    records.push(obj)\n  }\n  \n  const currents = records.filter(record => record.order_id === tags.orderId && record.product_id === tags.productId && record.product_desc === tags.description)\n  const current = currents[currents.length - 1]\n\n  //find the latest running record\n  const runnings = records.filter(record => record.order_state.toLowerCase() === 'running')\n  const filteredRunnings = runnings.filter(running => running.order_id !== tags.orderId || running.product_id !== tags.productId)\n  let running = filteredRunnings[filteredRunnings.length - 1]\n  \n  //If the records of that line is new, there might be no 'running' at all, return!\n  if (running === null || running === undefined) {\n    return [current, null]\n  }\n\n  //check if the latest running record is the latest record in it's own group\n  //becuase there is possibility that the record is set to paused, so the latest running record is not the latest record for that group\n  const runningGroups = records.filter(record => record.order_id === running.order_id && record.product_id === running.product_id && record.product_desc === running.product_desc)\n  let isRunningTheLatest = _.isEqual(running, runningGroups[runningGroups.length - 1])\n  if (!isRunningTheLatest) { running = null }\n\n  // console.log(records)\n  // console.log('cur',current);\n  // console.log('runn',running)\n  return [current, running]\n}\n\n/**\n * Add listener for the action selection\n * If edit clicked, go to the edit form with the current record data\n * If realease clicked, change record status to 'Ready'\n * If delete clicked, change record status to 'Deleted'\n */\nfunction addListeners() {\n  $(document).on('click', 'input[type=\"button\"][name=\"order-mgt-operator-actions-radio\"]', e => {\n\n    if (e.target.id === 'flag') {\n      if(rowData.order_state.toLowerCase() === 'ready' || rowData.order_state.toLowerCase() === 'paused') {\n        updateRecord(rowData, 'Next', 0)\n      }else {\n        alert('warning', 'Warning', 'Only orders in Ready or Paused state can be flagged')\n      }\n    }else if (e.target.id === 'start') {\n      if(rowData.order_state.toLowerCase() === 'next') {\n        if (runningRecord) {          \n          updateNextToRunningAndRunningExist(rowData, runningRecord, rowData.planned_rate)\n          postgres.getProductById(rowData.product_id, res => {\n            camunda.startQACheck(res[0], rowData.production_line)\n          })\n        }else {\n          updateRecord(rowData, 'Running', rowData.planned_rate)\n          postgres.getProductById(rowData.product_id, res => {\n            camunda.startQACheck(res[0], rowData.production_line)\n          })\n        }\n      }else {\n        alert('warning', 'Warning', 'Only orders in Next state can be started')\n      }\n    }else if (e.target.id === 'pause') {\n      if(rowData.order_state.toLowerCase() === 'running') {\n        updateRecord(rowData, 'Paused', 0)\n      }else {\n        alert('warning', 'Warning', 'Only orders in Running state can be paused')\n      }\n    }else if (e.target.id === 'complete') {\n      if(rowData.order_state.toLowerCase() === 'running' || rowData.order_state.toLowerCase() === 'paused') {\n        updateRecord(rowData, 'Complete', 0)\n      }else {\n        alert('warning', 'Warning', 'Only orders in Running or Paused state can be complete')\n      }\n    }else if (e.target.id === 'close') {\n      if(rowData.order_state.toLowerCase() === 'complete') {\n        updateRecord(rowData, 'Closed', 0)\n      }else {\n        alert('warning', 'Warning', 'Only orders in Complete state can be closed')\n      }\n    }\n\n  })\n\n}\n\nfunction removeListeners() {\n  $(document).off('click', 'input[type=\"button\"][name=\"order-mgt-operator-actions-radio\"]')\n}\n\nfunction updateRecord(data, status, rate){\n  const line = writeInfluxLine(data, status, rate)\n  const url = influxHost + 'write?db=smart_factory'\n  post(url, line).then(res => {\n    alert('success', 'Success', 'Order ' + rowData.order_id + ' has been marked as ' + status)\n    closeForm()\n    tableCtrl.refresh()\n  }).catch(e => {\n    alert('error', 'Error', 'An error occurred while updating the database, please check your database connection')\n    closeForm()\n    console.log(e)\n  })\n}\n\nfunction updateNextToRunningAndRunningExist(cur, run, rate){\n  const currentLine = writeInfluxLine(cur, 'Running', rate)\n  const runningLine = writeInfluxLine(run, 'Complete', 0)\n  const url = influxHost + 'write?db=smart_factory'\n  post(url, runningLine)\n  .then(post(url, currentLine)\n        .then(res => {\n          alert('success', 'Success', 'Order ' + cur.order_id + ' has been marked as Running')\n          closeForm()\n          tableCtrl.refresh()\n        })\n  ).catch(e => {\n    alert('error', 'Error', 'An error occurred while updating the database, please check your database connection')\n    closeForm()\n    console.log(e)\n  })\n}\n\n/**\n * Expect the status string (Normally are: 'Ready' or 'Deleted')\n * Then changed the status in the line with anything else unchanged\n * @param {*} status \n */\nfunction writeInfluxLine(data, status, rate){\n  //For influxdb tag keys, must add a forward slash \\ before each space \n  let product_desc = data.product_desc.split(' ').join('\\\\ ')\n\n  let line = 'OrderPerformance,order_id=' + data.order_id + ',product_id=' + data.product_id + ',product_desc=' + product_desc + ' '\n\n  if (data.compl_qty !== null && data.compl_qty !== undefined) {\n    line += 'compl_qty=' + data.compl_qty + ','\n  }\n  if (data.machine_state !== null && data.machine_state !== undefined) {\n    line += 'machine_state=\"' + data.machine_state + '\"' + ','\n  }\n  if (data.scrap_qty !== null && data.scrap_qty !== undefined) {\n    line += 'scrap_qty=' + data.scrap_qty + ','\n  }\n  if (data.actual_start_datetime !== null && data.actual_start_datetime !== undefined) {\n    line += 'actual_start_datetime=' + data.actual_start_datetime + ','\n  }\n  if (data.actual_end_datetime !== null && data.actual_end_datetime !== undefined) {\n    line += 'actual_end_datetime=' + data.actual_end_datetime + ','\n  }\n\n  if (status === 'Running') {\n    //set actual start time = now\n    line += 'actual_start_datetime=' + moment.now() + ','\n  }else if(status === 'Complete'){\n    //set actual end time = now\n    line += 'actual_end_datetime=' + moment.now() + ','\n  }\n\n  //line += 'order_state=\"' + status + '\"' + ','\n  line += 'order_date=\"' + data.order_date + '\"' + ','\n  line += 'production_line=\"' + data.production_line + '\"' + ','\n  line += 'order_qty=' + data.order_qty + ','\n  line += 'scheduled_end_datetime=' + data.scheduled_end_datetime + ','\n  line += 'scheduled_start_datetime=' + data.scheduled_start_datetime + ','\n  line += 'planned_changeover_time=\"' + data.planned_changeover_time + '\"' + ','\n  line += 'setpoint_rate=' + rate + ','\n  line += 'planned_rate=' + data.planned_rate\n\n  // console.log(line);\n  return line\n}\n\nexport { showActionForm }"]}