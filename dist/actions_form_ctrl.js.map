{"version":3,"sources":["../src/actions_form_ctrl.js"],"names":["showActionForm","productionLine","orderId","description","productId","tags","getRowData","callback","console","log","rowData","result","postgres","getOrderStates","ok","orderStates","data","utils","alert","error","order_state","toLowerCase","cons","STATE_PLAN","STATE_CLOSE","appEvents","emit","src","modalClass","model","removeListeners","addListeners","url","getInfluxLine","get","then","res","formatData","catch","e","influxHost","records","series","results","cols","columns","map","x","substring","length","rows","resultTags","i","push","values","row","obj","k","col","Object","assign","allRecords","currents","filter","record","order_id","product_id","product_desc","current","isStateCheckOK","to","conflict","from","fromStates","state","toStates","toState","fromState","options","state_options","index","indexOf","is_unique","conflicts","backup_state","$","document","on","target","id","prepareUpdate","STATE_FLAG","STATE_START","planned_rate","STATE_PAUSE","STATE_COMPLETE","rate","updateRecord","off","line","writeInfluxLine","conflictLine","conflictToState","confirm","ConfirmCtrl","tableCtrl","sendCamundaQACheck","show","sure","post","showAlerts","getProductById","camunda","startQACheck","production_line","closeForm","refresh","status","compl_qty","undefined","machine_state","getRid","scrap_qty","actual_start_datetime","actual_end_datetime","moment","now","order_date","order_qty","scheduled_end_datetime","scheduled_start_datetime","planned_changeover_time","split","join","runningRecord","trigger"],"mappings":"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","file":"actions_form_ctrl.js","sourcesContent":["import { appEvents } from 'app/core/core';\nimport { get, influxHost, post, alert } from './utils';\nimport * as tableCtrl from './table_ctrl';\nimport { ConfirmCtrl } from './confirm_modal_ctrl';\nimport * as postgres from './postgres';\nimport * as camunda from './camunda';\nimport * as utils from './utils';\nimport * as cons from './constants';\nimport moment from 'moment';\n\nlet rowData;\nlet runningRecord = {};\nlet orderStates = {};\nlet allRecords = [];\n\nconst closeForm = () => {\n\t$('#order-mgt-operator-action-form-dismiss-btn').trigger('click');\n};\n\nfunction showActionForm(productionLine, orderId, description, productId) {\n\tconst tags = {\n\t\tproductionLine: productionLine,\n\t\torderId: orderId,\n\t\tdescription: description,\n\t\tproductId: productId\n\t};\n\n\tgetRowData(callback, tags);\n\n\tasync function callback() {\n\t\tconsole.log('haha', rowData, tags);\n\t\tconst result = await postgres.getOrderStates();\n\t\tif (result.ok) {\n\t\t\torderStates = result.data;\n\t\t} else {\n\t\t\tutils.alert(\n\t\t\t\t'error',\n\t\t\t\t'Connection Error',\n\t\t\t\t`Cannot get Order States from Postgres database due to ${result.error}, please try again or contact the dev team`\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\t\tif (rowData.order_state) {\n\t\t\tif (rowData.order_state.toLowerCase() === cons.STATE_PLAN.toLowerCase()) {\n\t\t\t\talert('warning', 'Warning', 'This order has NOT been released');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (rowData.order_state.toLowerCase() === cons.STATE_CLOSE.toLowerCase()) {\n\t\t\t\talert('warning', 'Warning', 'This order has been closed');\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tappEvents.emit('show-modal', {\n\t\t\tsrc: 'public/plugins/smart-factory-operator-order-mgt-table-panel/partials/actions_form.html',\n\t\t\tmodalClass: 'confirm-modal',\n\t\t\tmodel: { orderId: tags.orderId }\n\t\t});\n\n\t\tremoveListeners();\n\t\taddListeners();\n\t}\n}\n\n/**\n * Get the record data with the tag values passed in\n * Call the callback function once it is finished\n * Stop and prompt error when it fails\n * @param {*} callback \n * @param {*} tags \n */\nfunction getRowData(callback, tags) {\n\tconst url = getInfluxLine(tags);\n\tget(url)\n\t\t.then((res) => {\n\t\t\tconst result = formatData(res, tags);\n\t\t\trowData = result;\n\t\t\tcallback();\n\t\t})\n\t\t.catch((e) => {\n\t\t\talert('error', 'Database Error', 'Database connection failed with influxdb');\n\t\t\tconsole.log(e);\n\t\t});\n}\n\n/**\n * Write line for the influxdb query\n * @param {*} tags \n */\nfunction getInfluxLine(tags) {\n\tlet url = influxHost + 'query?pretty=true&db=smart_factory&q=select last(*) from OrderPerformance' + ' where ';\n\turl += 'production_line=' + \"'\" + tags.productionLine + \"'\" + ' group by ' + '\"product_id\", \"order_id\"';\n\n\t// console.log(url)\n\n\treturn url;\n}\n\n/**\n * The params may contain more than one row record\n * This is to fomrat the http response into a better structure\n * And also filter out the latest record\n * @param {*} res \n */\nfunction formatData(res, tags) {\n\tlet records = [];\n\n\tconst series = res.results[0].series;\n\n\tlet cols = series[0].columns;\n\tcols = cols.map((x) => x.substring(5, x.length));\n\tcols[0] = 'time';\n\tlet rows = [];\n\tlet resultTags = [];\n\tfor (let i = 0; i < series.length; i++) {\n\t\trows.push(series[i].values[0]);\n\t\tresultTags.push(series[i].tags);\n\t}\n\n\tfor (let i = 0; i < rows.length; i++) {\n\t\tconst row = rows[i];\n\t\tlet obj = {};\n\t\tfor (let k = 0; k < cols.length; k++) {\n\t\t\tconst col = cols[k];\n\t\t\tobj[col] = row[k];\n\t\t}\n\t\tobj = Object.assign(obj, resultTags[i]);\n\t\trecords.push(obj);\n\t}\n\n\tallRecords = records;\n\tconst currents = records.filter(\n\t\t(record) =>\n\t\t\trecord.order_id === tags.orderId &&\n\t\t\trecord.product_id === tags.productId &&\n\t\t\trecord.product_desc === tags.description\n\t);\n\tconst current = currents[currents.length - 1];\n\n\treturn current;\n}\n\nfunction isStateCheckOK(rowData, to) {\n\tlet conflict = null;\n\tconst from = rowData.order_state;\n\tconst fromStates = orderStates.filter((x) => x.state === from.toLowerCase());\n\tconst toStates = orderStates.filter((x) => x.state === to.toLowerCase());\n\n\tif (fromStates.length === 0) {\n\t\tutils.alert(\n\t\t\t'warning',\n\t\t\t'Warning',\n\t\t\t`State ${from} not found from the config table in postgresdb, please finish order state configuration first`\n\t\t);\n\t\treturn false;\n\t} else if (toStates.length === 0) {\n\t\tutils.alert(\n\t\t\t'warning',\n\t\t\t'Warning',\n\t\t\t`State ${to} not found from the config table in postgresdb, please finish order state configuration first`\n\t\t);\n\t\treturn false;\n\t}\n\n\tconst toState = toStates[0];\n\tconst fromState = fromStates[0];\n\tconst options = fromState.state_options;\n\tconst index = options.indexOf(to.toLowerCase());\n\tif (!~index) {\n\t\tutils.alert('warning', 'Warning', `You can not change state from <${from.toLowerCase()}> to <${to}>`);\n\t\treturn false;\n\t}\n\n\tif (toState.is_unique) {\n\t\tconst conflicts = allRecords.filter((x) => x.order_state.toLowerCase() === toState.state.toLowerCase());\n\t\tif (conflicts.length !== 0) {\n\t\t\tconflict = conflicts[0];\n\t\t\tconflict.toState = toState.backup_state;\n\t\t}\n\t}\n\n\treturn [ true, conflict ];\n}\n\n/**\n * Add listener for the action selection\n * If edit clicked, go to the edit form with the current record data\n * If realease clicked, change record status to 'Ready'\n * If delete clicked, change record status to 'Deleted'\n */\nfunction addListeners() {\n\t$(document).on('click', 'input[type=\"button\"][name=\"order-mgt-operator-actions-radio\"]', (e) => {\n\t\tif (e.target.id === 'flag') {\n\t\t\tprepareUpdate(cons.STATE_FLAG, 0);\n\t\t} else if (e.target.id === 'start') {\n\t\t\tprepareUpdate(cons.STATE_START, rowData.planned_rate);\n\t\t} else if (e.target.id === 'pause') {\n\t\t\tprepareUpdate(cons.STATE_PAUSE, 0);\n\t\t} else if (e.target.id === 'complete') {\n\t\t\tprepareUpdate(cons.STATE_COMPLETE, 0);\n\t\t} else if (e.target.id === 'close') {\n\t\t\tprepareUpdate(cons.STATE_CLOSE, 0);\n\t\t}\n\t});\n}\n\nfunction prepareUpdate(state, rate) {\n\tconst result = isStateCheckOK(rowData, state);\n\tconst ok = result[0];\n\tconst conflict = result[1];\n\tif (ok) {\n\t\tupdateRecord(rowData, conflict, state, rate);\n\t}\n}\n\nfunction removeListeners() {\n\t$(document).off('click', 'input[type=\"button\"][name=\"order-mgt-operator-actions-radio\"]');\n}\n\nasync function updateRecord(data, conflict, toState, rate) {\n\tconst fromState = data.order_state.toLowerCase();\n\tconst line = writeInfluxLine(data, toState, rate);\n\tconst url = influxHost + 'write?db=smart_factory';\n\n\tif (conflict) {\n\t\tconst conflictLine = writeInfluxLine(conflict, conflict.toState || fromState, 0);\n\t\tconst conflictToState = conflict.toState || fromState;\n\t\tconst confirm = new ConfirmCtrl({\n\t\t\ttableCtrl,\n\t\t\tdata,\n\t\t\tconflict,\n\t\t\tconflictToState,\n\t\t\ttoState,\n\t\t\tline,\n\t\t\tconflictLine,\n\t\t\turl,\n\t\t\tsendCamundaQACheck\n\t\t});\n\t\tconfirm.show();\n\t} else {\n\t\tconst result = await utils.sure(utils.post(url, line));\n\t\tshowAlerts(result, data.order_id, toState);\n\t\tif (toState.toLowerCase() === cons.STATE_START.toLowerCase()) {\n\t\t\tsendCamundaQACheck(data);\n\t\t}\n\t}\n}\n\nfunction sendCamundaQACheck(data) {\n\tpostgres.getProductById(data.product_id, (res) => {\n\t\tif (res.length === 0) {\n\t\t\tutils.alert(\n\t\t\t\t'error',\n\t\t\t\t'Product Not Found',\n\t\t\t\t'Camunda QA Check process initialisation failed because this Product CANNOT be found in the database, it may be because the product definition has been changed, but you can still start it Manually in Camunda BPM'\n\t\t\t);\n\t\t} else {\n\t\t\tcamunda.startQACheck(res[0], data.production_line);\n\t\t}\n\t});\n}\n\nfunction showAlerts(result, id, state) {\n\tif (result.ok) {\n\t\talert('success', 'Success', `Order ${id} has been marked as ${state}`);\n\t\tcloseForm();\n\t\ttableCtrl.refresh();\n\t} else {\n\t\talert(\n\t\t\t'error',\n\t\t\t'Error',\n\t\t\t`An error occurred while updating the database due to ${result.error}, please try again or contact the dev team`\n\t\t);\n\t\tcloseForm();\n\t\tconsole.log(result.error);\n\t}\n}\n\n/**\n * Expect the status string (Normally are: 'Ready' or 'Deleted')\n * Then changed the status in the line with anything else unchanged\n * @param {*} status \n */\nfunction writeInfluxLine(data, status, rate) {\n\t//For influxdb tag keys, must add a forward slash \\ before each space\n\t// let product_desc = data.product_desc.split(' ').join('\\\\ ')\n\n\tlet line = 'OrderPerformance,order_id=' + data.order_id + ',product_id=' + data.product_id + ' ';\n\n\tif (data.compl_qty !== null && data.compl_qty !== undefined) {\n\t\tline += 'compl_qty=' + data.compl_qty + ',';\n\t}\n\tif (data.machine_state !== null && data.machine_state !== undefined) {\n\t\tline += 'machine_state=\"' + getRid(data.machine_state) + '\"' + ',';\n\t}\n\tif (data.scrap_qty !== null && data.scrap_qty !== undefined) {\n\t\tline += 'scrap_qty=' + data.scrap_qty + ',';\n\t}\n\tif (data.actual_start_datetime !== null && data.actual_start_datetime !== undefined) {\n\t\tline += 'actual_start_datetime=' + data.actual_start_datetime + ',';\n\t}\n\tif (data.actual_end_datetime !== null && data.actual_end_datetime !== undefined) {\n\t\tline += 'actual_end_datetime=' + data.actual_end_datetime + ',';\n\t}\n\n\tif (\n\t\tstatus === cons.STATE_START &&\n\t\t(data.actual_start_datetime === null || data.actual_start_datetime === undefined)\n\t) {\n\t\t//set actual start time = now if there is no actual\n\t\t//but do nothing if there is acutal start time, meaning that it was paused and start again\n\t\tline += 'actual_start_datetime=' + moment.now() + ',';\n\t} else if (status === cons.STATE_COMPLETE) {\n\t\t//set actual end time = now\n\t\tline += 'actual_end_datetime=' + moment.now() + ',';\n\t}\n\n\tline += 'order_state=\"' + getRid(status) + '\"' + ',';\n\tline += 'product_desc=\"' + getRid(data.product_desc) + '\"' + ',';\n\tline += 'order_date=\"' + data.order_date + '\"' + ',';\n\tline += 'production_line=\"' + getRid(data.production_line) + '\"' + ',';\n\tline += 'order_qty=' + data.order_qty + ',';\n\tline += 'scheduled_end_datetime=' + data.scheduled_end_datetime + ',';\n\tline += 'scheduled_start_datetime=' + data.scheduled_start_datetime + ',';\n\tline += 'planned_changeover_time=\"' + data.planned_changeover_time + '\"' + ',';\n\tline += 'setpoint_rate=' + rate + ',';\n\tline += 'planned_rate=' + data.planned_rate;\n\n\t// console.log(line);\n\treturn line;\n}\n\nfunction getRid(x) {\n\treturn x.split('\"').join('\\\\\"');\n}\n\nexport { showActionForm };\n"]}